USB key forensics
1) Write down vendor, Product, Version
2) Write S/N
3) Determine Parent Prefix ID (XP-)
4) Determine Vendor-ID and Prod (VID/PID) for first use after reboot
5) Determine drive letter (Windows Portable devices for Vista), (use ParentIDPref on MountedDevices for XP-)
6) Record volume GUID's
7) Find user that last mounted GUID. Reg write time is last mount time
8) Discover first time ever connected from setupapi.[dev.]log

Investigation for Malware methodology
1) Identify Rogue Processes
2) Analyze process DLL's and handles
3) Review network artifacts
4) Look for evidence of code injection
5) Check for signs of a rootkit
6) Dump suspicious processes and drivers

Malware Infection Cycle
1) Block initial exploits based on IOC signatures
2) Detect payloads and unknown exploits in mail, web, or file transfer
3) Block network callbacks and data exfiltration
4) Block lateral spread through network shares scanning

APT Phases
1) Reconnaissance - target using social media for personalization
2) Intrusion - Spear Phishing, purchased from attacker, watering hole attacks (infect common site)
3) Infection - backdoor, maybe use dropper, begin gathering info
4) Credential Theft
5) Lateral Movement - Use stolen credentials, network shares, or internal email, can shift attention
6) Data Exfiltration
7) Persistence - repeated credential exfiltration, contin update tools, work outside bus hours, target strategic machines

Malware types
Downloaders/droppers
Rogue utility and security products
Trojans, RATs : Zeus, SpyEye, Citadel, GhostRAT, poison ivy, SpyNet
Rootkit - stealthy, Trojan func, may damage, requires reinstalling, can exist in MBR. TDL/TDSS, ZeroAccess, Stuxnet
Viruses - infect other binaries or boot sectors, requires reinstalling,  Sality, Virut
Worms - spread using exploits, USB drives, email, shares. Reinstall systems


Incidence Response Process - live forensics
1) Preparation: Be ready with the tools and training for incidents before they happen.
2) Identification: Identify incidents thoroughly; going through the IR process only to find a false alarm is no fun.
3) Containment: Contain the incident to prevent possible collateral damage. eg. revoking user accounts, blocking access at FW, or updating AV rules
4) Eradication: Get rid of the malicious code, unauthorized account, or bad employee that caused the incident.
5) Recovery: Make sure the system meets company standards before returning it to service. Continue monitoring for any aberrant behavior
6) Lessons Learned

1) Prepare Evidence
   Locally mount a working copy of images RO
   Gather hashes and run against online repositories
   Extract exe/dll from unallocated space

2) Run multiple AV against extracted files

3) Indicators of Compromise Search
     Scan for known hashes, IP's, URL's

4) Automated Memory Analysis - malfind

5) Evidence of Persistence
   Scheduled tasks
   Service replacements / creations
   auto-start registry (autoruns)
   DLL search order hijacks
   Trojaned legit sys libraries

6) Packing / Entropy Checks
   Scan for indication of packing, test entropy, signature id, signed driver checks

7) Review event logs

8) Super Timeline Exam
   See if above malfind candidates appear

9) Manual Memory Analysis
   Volatility

10) Manual 3rd party hash lookups

11) MFT anomolies for file creation sequences

12) File-time anomolies
    analyzeMFT and log2timeline

###################################
# Domain/Admin Persistence - DefCon 23
###################################

PowerSploit
- Invoke-Shellcode/TokenManipulation/Mimikatz
- Get-GPPPassword
- Add-Persistence

Empire:
- Pure PowerShell agent with secure comms
- Run PS code with PowerShell.exe
- Wraps func of most popular attack tools
    Macros, DLL, HDA
- Injects into processes
- Leverages Python

Scan Domains in environments
Finding Privileged Accounts recursively finds:
  - Domain Admins, Administrators, RODC Denied Replication GRoups
Enumerate Trusts and Contact Objects in Forest to find partner orgs

SPN Scanning Service Discovery without network port scanning
- Service Principle Name is required for Kerberos to function
- User requests service which requires kerberos service ticket
    Includes SQL, RDP, WinRM, FIM, SCCM

Event Log Explorer FSPro Labs

Logon Type
2 - Interactive
3 - Remote
10 - RDP

======LATERAL MOVEMENT #1=======
4624 Network login
4672 Admin login
4688 Token elevation - Shows executable name
5140 Network share
Task / AT job - 106 (task sched) followed by 200 (task exe)
201 Task finishes.
141 Task removed else task remains to be viewed
4634 Logoff

=======Domain Controller RDP/Remote access=======
Little for security.evtx in DC due to wrapping log buffer
*TerminalServices Remote Connection Manager
1149 - Remote RDP authentication
*TerminalServices Local Connection Manager
21 - Successful login - could follow 1149
23 - Logoff
24 - Disconnect after logoff
25 - Reconnect - could follow 1149

Persistence - Current Version Run key executes at login
7045 - Service registered - ImagePath for executable in unusual path

Regaining User account
- Autorun Malware to regain user access
   Autoruns will show unsigned code as red (vbscript)
     Malicious code could be appended to existing vbs's
     Yellow lines are where files aren't found
- Create registry based backdoors
   False startups links call [power]shellcode dropper
1) Creating a Domain Account
   net user USER PASSWD /add /domain
   net group "Domain Admins" user /add /domain
   4720 User account created
   4722 Enabled user account
   4724 Reset account password
   4728 Member added to security enabled global group Domain Admin
   4737 Security enabled global group was changed
2) Skeleton Key Patch
   Use mimikatz to run (AV could catch binary)
   New LSA security provider added to (LSASS)
   net user \\XXX\c$ /user:domain\admin mimikatz
   Domain Admin abilities granted
   4673 A Privileged service was called - Register logon process
     Occurs during reboot
3) Creating Golden Tickets
   Golden Ticket - Forged TGT (Ticket to get tickets)
   Silver Ticket - Forged TGS (Ticket Granting Service)
   Tickets allow to connect to LDAP service and perform DCSync to pull passwords
   Overpass-the-Hash - Use kerberos ticket to change a user's password which is more powerful than PTH
   Hacker needs to be NT Authority Systems then scrapes krbtgt hash
   Ticket does not register with domain ctrl for 20 minutes
   Can use kerberroast for offline cracking of service tickets
     - No admin rights
     - No traffic sent to target
     - Get service tickets to each SPN
     - Mimikatz to save svc ticket to a file
     - Kerberoast brute forces the ticket
   Log event is not unique. Only found by error - casing issues, wrong values
   IDS signature involving ARCFOUR-HMAC-MD5 NTLM enc type
   To cleanup, rotate password of krbtkt twice.  Win2008+ require all in domain
     to reboot.
4) Tamper with SID History
   Requires mimikatz. No sign user has secondary SID.
   4765 User Acct Mgmt - Sid history was added to an account
5) Tamper with AD DACL's
   AD Objects have ACL's like files.  Not exposed in UI. 
   VB is required to modify AD Objects
   Add user to a built-in object group like Terminal Services
   Modify AdminSDHolder ACL so it will replace built-in within an hour
   Modify the built-in service's ACL and the new AdminSDHolder will replace it
   4735 Security Enabled Local Group changed (the built-in)
   4737 Security Enabled Global group was changed
   5136 Directory Service changes - DS object was modified - Value deleted/added
   Changing DACL requires VB script

Owning Domain Controller
- Get Access to the NTDS.dit file and extract data
- Dump Credentials on DC (local or remote)
  + Mimikatz, Invoke-Mimikatz, Mimikatz DCSync

Defense: 
MS LAPS - automatic local admin pw change - random for each pw
Enable proper logging plus command-shell and power shell logging
Forged Kerberos Tickets: Potential domain field anomolies in events
DC Silver Tickets: Change acct passwords after breach
AdminSDHolder: Check Object Permissions
DCSync: IDS Sig of "DRSUAPI" or "DsGetNCCChanges request" where src != DC IP
DSRM v2: Change DSRM PW regularly & monitor reg key & DSRM events

Powershell attack detection
Log all powershell activity
Interesting activity
  -Downloads via .NET
  -Invoke-Expression (& derivatives: "iex")
  -"EncodedCommand" ("-enc") & "Bypass"
  -BITS activity
  -Scheduled Task creation/deletion
  -PowerShell remoting
Limit & Track Powershell remoting (configure WinRM to certain domains)
Audit & Meter PowerShell usage

Invoke-Mimikatz even log keywords:
  "System.Reflection.AssemblyName"
  "System.Reflection.Emit.AssemblyBuilderAccess"
  "System.Runtime.InteropServices.MarshalAsATtribute"
  "TOKEN_PRIVILEGES"
  "SE_PRIVILEGE_ENABLED"
Invoke-TokenManipulation
  "TOKEN_IMPERSONATE"
  "TOKEN_DUPLICATE"
  "TOKEN_ADJUST_PRIVILEGES"
Invoke-CredentialInjection:
  "TOKEN_PRIVILEGES"
  "GetDelegateForFunctionPointer"
Invoke-DLLInjection
  "System.Reflection.AssemblyName"
  "System.Reflection.Emit.AssemblyBuilderAccess"
Invote-Shellcode
  "System.Reflection.AssemblyName"
  "System.Reflection.Emit.AssemblyBuilderAccess"
  "System.MulticastDelegate"
  "System.Reflection.CallingConventions"
Get-GPPPassword (Group Policy Pref Passwords)
  "System.Security.Cryptography.AesCryptoServiceProvider"
  "0x4e,0x99,0x06,0xe8,0xfc,0xb6,0x6c,0xc9,0xfa,0xf4"
  "Groups.UserProperties.cpassword"
  "ScheduledTasks.Task.Properties.cpassword"
Out-MiniDump
  "System.Management.Automation.WindowsErrorReporting"
  "MiniDumpWriteDump"

Detect Kerberos exploit
  MS14-068 - IDS Signature for Kerberos AS-REQ & TGS-REQ w "Include PAC: False"
Group Policy Pref - MS Goof exposing private key
  Install KB2962486 and delete existing GPP xml files in SYSVOL containing pw's
  No passwords in SYSVOL!!
Set GPO to prevent local accounts from connecting over network to computers
  KB2871997
Implement RDP Restricted Admin Mode
  Removes Credentials at Logoff
  Removes clear-text passwords from memory
   -monitor HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecurityProviders\Wdigest=0
  Win7/Win2k8R2: KB2984972 / KB2984976 / KB2984981
  Win8/Win 2012: KB2973501

###################################
# Lenny Zeltser
###################################
Analyzing a windows executable for Malware
pescanner .exe or .dll
  ssdeep fuzzy hash, md5 hash
  checks packers which gives weight to suspicion
  clamav
  IAT alerts - Import Address Table - Look at external functions run
  Sections - Entropy checked for randomness. High entropy might have packed contents
  Signature scans - YARA
  Resource Entries - can show other languages used to make it

pyew to inspect malware
  built-in hex viewer
  pyew.imports shows commands it runs
  url extracts urls
  threat computes hash and queries it in threatexpert.com

xorsearch -s .dll http: or https:
  brute forces run byte long key values
  research resulting urls 
  Run produces *.05 containing all strings to view

Exploring infection in a network capture
  NetworkMiner pcap_file
    Parses traffic and saves files into local file
  jsunpackn.py -v -g image.png -s pcap_file
    deobfuscates JS and saves files from pcap

Examine malicious document/media files
  pdfid file.pdf
    Unusual to have JavaScript.  RichMedia could be for flash embedment
    Launch can run remote programs.

  pdfextract file.pdf
    Extracts JS under dump/scripts. 
    Payload could contain unicode. 
    cat unicode.txt | unicode2hex-escaped | shellcode2exe
    Examine resulting exe

  swf_mastah -o ./ -f file.pdf
    Extracts flash from pdf

  swfdump -Ddu file.swf

  xxxswf.py -xd file.doc
    Extracts Flash from most formats

#############################################################
Behavioral Analysis - mold test envir to mimic infected one.
#############################################################
Add svcs to witness malware effects
-Execute in isolated environment
-Observe how it interacts with FS, registry, network
  Regshot monitors registry changes using snapshots
  Process Monitor filters by app to show events/registry changes
  CaptureThat [-c] capture files [-n] network
    Tries to hide normal windows activity
    Creates zip of results.
  FakeDNS shows queries executed to localhost
  Mailpot is an email honeypot

*Code Analysis
OllyDbg on .exe
  Run: Search for all referenced text strings
  See what runs where that string is referenced in disassembler
  Memory Access Breakpoints
  Load app, hit run, alt-m for memory map. Binary search ctrl-b, 
    search for string and see results.  ctrl-l repeats search.
    Highlight string in disassembly. Dropdown, Breakpoint memory on access.
    Step into per step and view assembly
