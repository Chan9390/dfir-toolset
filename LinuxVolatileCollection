VOLATILE DATA COLLECTION STEPS  
• System date and time
• On the compromised machine, run a trusted command shell with statically compiled binaries
• Run script to start a log of your keystrokes. Terminate at completion by typing exit.  
• Document the date and time of the computer and compare it with a reliable time source.  
• Acquire contents of physical memory.  
• Gather hostname, IP address, and operating system details.  
• Gather system status and environment details.  
• Identify users logged onto the system.  
  wtmpx and archived versions using last
• Inspect network connections and open ports and associated activity.  
• Examine running processes, tree format, and pmap or lsof  
• Correlate open ports to associated processes and programs.  
• Determine what files and sockets are being accessed.  
• Examine loaded modules and drivers.  
• Examine connected host names.  
• Examine command-line history.  
• Identify mounted shares.  
• Check for unauthorized accounts, groups, shares, and other system resources and configurations.  
  rhosts, fstab, export, /etc/hosts.*, /etc/X*hosts and ~home/.Xauthority, ~home/.ssh/authorized_keys
• Determine scheduled tasks.  /var/spool and /etc/crontabs.*
• Determine audit policy configuration.  
• printenv to print environment variables
• /proc/version for compiler version
• /proc/<pid>/fd and maps
• sa command if auditd is running
• Look if eth is in permiscuous mode - netstat -i  - flag = P
• Harvest process details, loaded modules, network connections and compare against memory dump forensics
• File listing of each partition during the live response using The SleuthKit
  (e.g., fls /dev/hda1 –lr -m /

Optional during live response for data gathering
• gcore <pid> to dump individual process for use in gdb
• memfetch on github to dump processes for strings searching

Post Collection Forensics
• Look for common indicators of malicious code including memory injection and hooking.
• Recover the executable code and process memory from capture for further analysis
• Perform keyword searches for known details relating to a malware incident
• Extract contextual details such as URIs, system logs, and configuration values
• Perform temporal and relational analysis of information including a timeline

Cold disk techniques
• Search for Known Malware
  NSRL, hashes, packaging system self-verifies (Rpm -Va)
  rkhunter, chkrootkit
  AV, keywords
• Survey Installed Programs
• Inspect Executables
• Review Services, Modules, and Auto-start Locations
• Review Scheduled Jobs
• Examine Logs (system logs, AntiVirus logs, Web browser history, etc.)
• Review User Accounts
• Examine File System
• Examine Configuration Files
• Perform keyword searches for any specific, known details relating to a malware incident. Useful keywords may come from other forms of analysis, including memory forensics and analysis of the malware itself.
• Harvest available metadata including file system date-time stamps, modification times of configuration files, e-mails, entries in Web browser history, system logs, and other logs such as those created by AntiVirus, crash dump monitoring, and patch management programs. Use this information to determine when the malware incident occurred and what else was done to the system around that time, ultimately generating a time line of potentially malicious events.
• Look for common indicators of anti-forensics including file system date-time stamp alteration, log manipulation, and log deletion.
• Look for links to other systems that may be involved.
• Look for data that should not be on the system such as directories full of illegal materials and software or data stolen from other organizations.
